<html> <head> <title>reset</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> </head>

<body bgcolor="#FFFFFF"> <p>Reset</p> <p><!--startlist-#zerotouchsensor,#zeroclickssensor,#zerotrsensor,#zerolightsensor,#zerotempcsensor,#zerotempfsensor,#zeroanglesensor,#emptycontainer,#rcxzerotimer,#rcxemptymailbox,#setclock,#cleardatamemory,#setupcustomsensor,#resetsensorports-endlist--></p> <table width="75%" border="1"> <tr> <td width="46%">Icons &amp; Hints</td> <td width="54%">Examples</td> </tr> <tr> <td width="46%"> <!--#begin_zerotouchsensor--> <!--example=zerotouchsensor.vit=example--> <!--#begin_picture1--> <img src="images/zerotouchsensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the touch sensor. Helpful if taking touch sensor data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/zerotouchsensor.jpg" height=32 width=237> <!--#end_picture2--> <!--#begin_text2--> This piece of code resets the touch sensor then turns on motor A. When the touch sensor is pressed, motor A is shut off. This program could run without the reset, however, the reset works to ensure accurate touch sensor data. <!--#end_text2--> <!--#end_zerotouchsensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zeroclickssensor--> <!--example=rcxwhileclicksltloop.vit=example--> <!--#begin_picture1--> <img src="images/zeroclickssensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the click count sensor. Helpful if taking clicks data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxwhileclicksltloop.jpg" width="272" height="32"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeros the clicks sensor and then starts a loop that would continuously play the note C and a rest until the number of clicks was 10 (the default). <!--#end_text2--> <!--#end_zeroclickssensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zerotrsensor--> <!--example=rcxtrcountfork.vit=example--> <!--#begin_picture1--> <img src="images/zerotrsensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the touch and release sensor. Helpful if taking touch and release data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxtrcountfork.jpg" height=67 width=277> <!--#end_picture2--> <!--#begin_text2--> This piece of code turns on motor A for 10 seconds, and then shuts it off. If after 10 seconds the touch sensor has been touched and released more than 10 times (the default), it plays a sound. <!--#end_text2--> <!--#end_zerotrsensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zerolightsensor--> <!--example=zerolightsensor.vit=example--> <!--#begin_picture1--> <img src="images/zerolightsensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the light sensor. Helpful if taking light sensor data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/zerolightsensor.jpg" height=32 width=266> <!--#end_picture2--> <!--#begin_text2--> This piece of code resets the light sensor and then logs 10 data points. <!--#end_text2--> <!--#end_zerolightsensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zerotempcsensor--> <!--example=zerotempcsensor.vit=example--> <!--#begin_picture1--> <img src="images/zerotempcsensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the temperature sensor. Helpful if taking temperature data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/zerotempcsensor.jpg" height=32 width=272> <!--#end_picture2--> <!--#begin_text2--> This piece of code resets the temperature sensor and then logs 10 data points. <!--#end_text2--> <!--#end_zerotempcsensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zerotempfsensor--> <!--example=zerotempfsensor.vit=example--> <!--#begin_picture1--> <img src="images/zerotempfsensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the temperature sensor. Helpful if taking temperature data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/zerotempfsensor.jpg" height=32 width=252> <!--#end_picture2--> <!--#begin_text2--> This piece of code resets the temperature sensor. Then it turns on motor A. When the temperature falls below 80 degrees Fahrenheit (the default), motor A is shut off. <!--#end_text2--> <!--#end_zerotempfsensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_zeroanglesensor--> <!--example=rcxrotationsensorfork.vit=example--> <!--#begin_picture1--> <img src="images/zeroanglesensorc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the angle sensor. Helpful if taking angle or rotation data. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxrotationsensorfork.jpg" height=52 width=263> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeros the angle sensor then waits 10 seconds. If at that point the rotation sensor reads greater than 1 rotation (a reading of 16, the default), then the RCX plays a sound. <!--#end_text2--> <!--#end_zeroanglesensor--> </td> </tr> <tr> <td width="46%"> <!--#begin_emptycontainer--> <!--example=rcxwhilecontainerltloop.vit=example--> <!--#begin_picture1--> <img src="images/emptycontainerc.jpg" height=32 width=183> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to empty a container. Helpful whenever you are placing new values in a container. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxwhilecontainerltloop.jpg" width="267" height="60"> <!--#end_picture2--> <!--#begin_text2--> This piece of code would zero the container. Then it would start a loop that plays the note C and adds one to the container. The loop would end when the container reaches 5. In total, it will play the note C five times. <!--#end_text2--> <!--#end_emptycontainer--> </td> </tr> <tr> <td width="46%"> <!--#begin_rcxzerotimer--> <!--example=rcxtimerfork.vit=example--> <!--#begin_picture1--> <img src="images/rcxzerotimerc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use to reset timer. Helpful whenever you use the timers. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxtimerfork.jpg" height=73 width=264> <!--#end_picture2--> <!--#begin_text2--> This piece of code turns on lamp A for a random amount of time, and then turns it off. If the time is less than 3 seconds (the timer measures tenths of seconds, so the modifier 30 is equivalent to 3 seconds), the RCX plays a sound. <!--#end_text2--> <!--#end_rcxzerotimer--> </td> </tr> <tr> <td width="46%"> <!--#begin_rcxemptymailbox--> <!--example=rcxmailboxfork.vit=example--> <!--#begin_picture1--> <img src="images/rcxemptymailboxc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to empty the mailbox. Helpful when you are planning to receive new mail or want to check for new mail. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/rcxmailboxfork.jpg" height=52 width=268> <!--#end_picture2--> <!--#begin_text2--> This piece of code would empty the mail box. After 10 seconds, it checks to see if it has received mail whose value is greater than 1 (the default). If it has, the RCX plays a sound. <!--#end_text2--> <!--#end_rcxemptymailbox--> </td> </tr> <tr> <td width="46%"> <!--#begin_setclock--> <!--example=setclock.vit=example--> <!--#begin_picture1--> <img src="images/setclockc.jpg" height=52 width=162> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this to reset the RCX clock. <!--#end_text1--> </td> <td width="54%"> <!--#begin_picture2--> <img src="images/setclock.jpg" height=32 width=237> <!--#end_picture2--> <!--#begin_text2--> This piece of code resets the clock to zero and turns on motor A. When the clock gets to 1 minute (the default), motor A turns off. <!--#end_text2--> <!--#end_setclock--> </td> </tr> <tr> <td> <!--#begin_cleardatamemory--> <!--example=cleardatamemory.vit=example--> <!--#begin_picture1--> <img src="images/cleardatamemoryc.jpg" height=32 width=161> <!--#end_picture1--> <!--#begin_text1--> Hints: Clears data logging memory. Helpful if you're taking lots of data or have a lengthy program. <!--#end_text1--> </td> <td> <!--#begin_picture2--> <img src="images/cleardatamemory.jpg" height=32 width=260> <!--#end_picture2--> <!--#begin_text2--> This piece of code clears the data memory, then logs 500 points of rotation sensor data. <!--#end_text2--> <!--#end_cleardatamemory--> </td> </tr>
  <tr>
    <td>
      <!--#begin_setupcustomsensor-->
      <!--example=setupcustomsensorex.vit=example-->
      <!--#begin_picture1-->
      <img src="images/setupcustomsensorc.jpg" width="198" height="59">
      <!--#end_picture1-->
      <!--#begin_text1-->
    Hints: Allows you to programmatically configure the type, mode and slope
    of the Generic Sensor (settings of which are specified in 101Generic.sa sensor
    file) Calibrations must be altered in the actual sensor file.
    <!--#end_text1-->
    </td>
    <td>
      <!--#begin_picture2-->
      <img src="images/setupcustomsensorex.jpg" width="249" height="123">
      <!--#end_picture2-->
      <!--#begin_text2-->
    This piece of code sets up a sensor with as type 'None', mode 'Raw', with
    a slope of 2. It waits for the value to read below 3 and then beeps.
    <!--#end_text2-->
    <!--#end_setupcustomsensor-->
    </td>
  </tr> 
  <tr> <td width="46%"><!--#begin_resetsensorports--> <!--example=resetsensorportsex.vit=example--> <!--#begin_picture1--> <img src="images/resetsensorportsc.jpg" width="176" height="32">    <!--#end_picture1--> <!--#begin_text1--> Hints:
      Allows you to reset the sensor ports so you can use two different sensors
      on the same port. Note: This should be used carefully by advanced users
      and can only be implemented with compatible sensors. <!--#end_text1--> </td> 
    <td width="54%"> <!--#begin_picture2--> <img src="images/resetsensorportsex.jpg" width="269" height="61">    <!--#end_picture2--> <!--#begin_text2-->      This
      piece of code waits for the touch sensor to be pressed and the resets the
      sensor ports, waits for one second, and then beeps until the light value
      is greater than 50.       <!--#end_text2--> <!--#end_resetsensorports--> </td> 
  </tr> </table> 
<p>&nbsp; </p> </body> </html>
