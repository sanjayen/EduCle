<html> <head> <title>modifiers</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> </head><body bgcolor="#FFFFFF"> <p>Modifiers</p> <p><!--startlist-#rcxoutputa,#rcxoutputb,#rcxoutputc,#rcxinput1,#rcxinput2,#rcxinput3,#rcxredcontainer,#rcxbluecontainer,#rcxyellowcontainer,#rcxgenericcontainer,#rcxc-container,#rcxredtimer,#rcxbluetimer,#rcxyellowtimer,#rcxredlogger,#rcxbluelogger,#rcxyellowlogger,#samplingatonetenthsec,#samplingatonesec,#samplingattensec,#samplingatonemin,#samplingatonehour,#touchsampling,#freesamplingwtimestamp,#freesampling,#clockvalue,#firmwareversion,#batteryvalue,#powerlevel1,#powerlevel2,#powerlevel3,#powerlevel4,#powerlevel5,#valueofport1,#valueofport2,#valueofport3,#valueofredcontainer,#valueofbluecontainer,#valueofyellowcontainer,#randomnumber,#valueofc-container,#valueofgenericcontainer,#valueofredtimer,#valueofbluetimer,#valueofyellowtimer,#mailvalue,#rcxvalueofredlogger,#rcxvalueofbluelogger,#rcxvalueofyellowlogger,#redevent,#blueevent,#yellowevent,#genericevent,#valueofredevent,#valueofblueevent,#valueofyellowevent,#valueofgenericevent,#redutvalue,#blueutvalue,#yellowutvalue,#genericutvalue,#redltvalue,#blueltvalue,#yellowltvalue,#genericltvalue,#redhvalue,#bluehvalue,#yellowhvalue,#generichvalue,#reddurationvalue,#bluedurationvalue,#yellowdurationvalue,#genericdurationvalue,#rcxloopcounter,#valueofloopcounter-endlist--></p> <table width="79%" border="1"> <tr> <td width="47%">Icons &amp; Hints</td> <td width="53%">Examples</td> </tr> <tr> <td width="47%"> <!--#begin_rcxoutputa--> <!--example=rcxmotorforward.vit=example--> <!--#begin_picture1--> <img src="images/rcxoutputac.jpg" width="223" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your output device is connected to port A. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/rcxmotorforward.jpg" width="248" height="119"> <!--#end_picture2--> <!--#begin_text2--> <br> This piece of code would turn on motors connected to ports A and B in the forward direction.&nbsp; After 4 seconds, it would turn them off. <!--#end_text2--> <!--#end_rcxoutputa--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxoutputb--> <!--example=rcxmotorforward.vit=example--> <!--#begin_picture1--> <img src="images/rcxoutputbc.jpg" width="223" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your output device is connected to port B. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/rcxmotorforward.jpg" width="248" height="119"> <!--#end_picture2--> <!--#begin_text2--> This piece of code would turn on motors connected to ports A and B in the forward direction.&nbsp; After 4 seconds, it would turn them off. <!--#end_text2--> <!--#end_rcxoutputb--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxoutputc--> <!--example=rcxoutputb.vit=example--> <!--#begin_picture1--> <img src="images/rcxoutputcc.jpg" width="223" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your output device is connected to port C. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/rcxlamp.jpg" width="232" height="126"> <!--#end_picture2--> <!--#begin_text2--> This piece of code would turn on lamps connected to ports A and C at power level 3. After 6 seconds, it would turn them off.&nbsp; <!--#end_text2--> <!--#end_rcxoutputc--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxinput1--> <!--example=modifier_port1.vit=example--> <!--#begin_picture1--> <img src="images/rcxinput1c.jpg" width="91" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your input device is connected to port 1. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_port1.jpg" width="222" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor A forward at power level one until the touch sensor that is connected to Port one is pressed in. It then plays a sound and stops motor A. <!--#end_text2--> <!--#end_rcxinput1--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxinput2--> <!--example=modifier_port1.vit=example--> <!--#begin_picture1--> <img src="images/rcxinput2c.jpg" width="91" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your input device is connected to port 2. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_port1.jpg" width="222" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor A forward at power level one until the touch sensor that is connected to Port one is pressed in. It then plays a sound and stops motor A. <!--#end_text2--> <!--#end_rcxinput2--> </td> </tr> <tr> <td width="47%" height="175"> <!--#begin_rcxinput3--> <!--example=modifier_port1.vit=example--> <!--#begin_picture1--> <img src="images/rcxinput3c.jpg" width="91" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate your input device is connected to port 3. <!--#end_text1--> </td> <td width="53%" height="175"> <!--#begin_picture2--> <img src="images/modifier_port1.jpg" width="222" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor A forward at power level one until the touch sensor that is connected to Port one is pressed in. It then plays a sound and stops motor A. <!--#end_text2--> <!--#end_rcxinput3--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxredcontainer--> <!--example=containerTouchFillex.vit=example--> <!--#begin_picture1--> <img src="images/rcxredcontainerc.jpg" width="122" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Red Container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerTouchFill.jpg" width="218" height="83"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the touch sensor. A sound is played and the value of the red container is shown on the RCX. If the value of the touch sensor was 1 (meaning it was pressed in), the RCX would read 1. <!--#end_text2--> <!--#end_rcxredcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxbluecontainer--> <!--example=containerADDex.vit=example--> <!--#begin_picture1--> <img src="images/rcxbluecontainerc.jpg" width="122" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Blue Container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerADDex.jpg" width="189" height="88"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Blue Container with a value of 1. It then ADDs 2 to the blue container. The value of the Blue Container would then be displayed on the RCX as 3. <!--#end_text2--> <!--#end_rcxbluecontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxyellowcontainer--> <!--example=containerLightFillex.vit=example--> <!--#begin_picture1--> <img src="images/rcxyellowcontainerc.jpg" width="122" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Yellow Container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerLightFill.jpg" width="220" height="81"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Yellow Container with the value of the light sensor. A sound is played and the value of the Yellow Container is shown on the RCX. If the value of the light sensor was 41, the RCX would read 41. <!--#end_text2--> <!--#end_rcxyellowcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxgenericcontainer--> <!--example=containerTempFFillex.vit=example--> <!--#begin_picture1--> <img src="images/rcxgenericcontainerc.jpg" width="224" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Generic Container. 0 corresponds with the Red Container, 1 with the Yellow Container, and 2 with the Blue Container. Containers 3-20 can be used by string in a numeric constant for the container #. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerTempFFill.jpg" width="220" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Generic Container with the value of the Temperature sensor in Fahrenheit. A sound is played and the value of the Generic Container is shown on the RCX. If the value of the sensor was 75 deg, the RCX would read 75. <!--#end_text2--> <!--#end_rcxgenericcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxc-container--> <!--example=rcxccontainerex.vit=example--> <!--#begin_picture1--> <img src="images/rcxc-containerc.jpg" width="224" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: This command takes the value in the container specified (Container #) and uses that to choose the container specified. This is the ROBOLAB equivalent of a C Pointer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/rcxccontainerex.jpg" width="344" height="127"> <!--#end_picture2--> <!--#begin_text2--> This  piece of code zeroes both the generic container (3) and the Red Container.  It then takes the value of the generic container (0) and uses that to determine  what container should be filled with the value of 10. 0 corresponds to the  Red Container so the Red Container is filled with a value of 10 and that is  then  displayed on the the RCX. The program then waits 4 seconds and then shows the  value of  the Generic Container which is still 0. <!--#end_text2--> <!--#end_rcxc-container--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxredtimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/rcxredtimerc.jpg" width="97" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Red Timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for 10 seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_rcxredtimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxbluetimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/rcxbluetimerc.jpg" width="97" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Blue Timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for 10 seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_rcxbluetimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxyellowtimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/rcxyellowtimerc.jpg" width="97" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Yellow Timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for 10 seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_rcxyellowtimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxredlogger--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/rcxredloggerc.jpg" width="271" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Red Data Set. You can wire in additional Data Sets. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_rcxredlogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxbluelogger--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/rcxblueloggerc.jpg" width="271" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Blue Data Set. You can wire in additional Data Sets. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_rcxbluelogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxyellowlogger--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/rcxyellowloggerc.jpg" width="271" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to indicate that you are using values associated with the Yellow Data Set. You can wire in additional Data Sets. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_rcxyellowlogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_samplingatonetenthsec--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/samplingatonetenthsecc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every one tenth (.1) of a second. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_samplingatonetenthsec--> </td> </tr> <tr> <td width="47%"> <!--#begin_samplingatonesec--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/samplingatonesecc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every second. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_samplingatonesec--> </td> </tr> <tr> <td width="47%"> <!--#begin_samplingattensec--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/samplingattensecc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every ten seconds. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_samplingattensec--> </td> </tr> <tr> <td width="47%"> <!--#begin_samplingatonemin--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/samplingatoneminc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every minute. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_samplingatonemin--> </td> </tr> <tr> <td width="47%"> <!--#begin_samplingatonehour--> <!--example=modifier_SampRate.vit=example--> <!--#begin_picture1--> <img src="images/samplingatonehourc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every hour. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_SampRate.jpg" width="225" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will initialize the light sensor on port one, and will begin data logging on the Red Data Set for 10 points. This code captures data every second. <!--#end_text2--> <!--#end_samplingatonehour--> </td> </tr> <tr> <td width="47%"> <!--#begin_touchsampling--> <!--example=modifier_touch2Samp.vit=example--> <!--#begin_picture1--> <img src="images/touchsamplingc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier in a data acquisition program to take a sample every time the touch sensor is pressed on port two. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_touch2Samp.jpg" width="255" height="98"> <!--#end_picture2--> <!--#begin_text2--> First of all, this piece of code zeroes the touch sensor on Port 2. It then initializes the light sensor on port one and begins to take data points in the Red Data Set every time the touch sensor on port 2 is pressed. The program stops data logging when the user gets 10 points. <!--#end_text2--> <!--#end_touchsampling--> </td> </tr> <tr> <td width="47%"> <!--#begin_freesamplingwtimestamp--> <!--example=modifier_freeSampTimeStamp.vit=example--> <!--#begin_picture1--> <img src="images/freesamplingwtimestampc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a Start Data Logging subroutine to capture data points every time you write to the data set and marks the data with time. The time will rollover every 2^16 tenths of a second. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_freeSampTimeStamp.jpg" width="222" height="99"> <!--#end_picture2--> <!--#begin_text2--> This piece of code initializes the light sensor on port one, takes 10 data points on the Red Data Set, and then stops taking data points. It captures data every time you write to the data set and marks the data with time. <!--#end_text2--> <!--#end_freesamplingwtimestamp--> </td> </tr> <tr> <td width="47%"> <!--#begin_freesampling--> <!--example=modifier_freeSamp.vit=example--> <!--#begin_picture1--> <img src="images/freesamplingc.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a Start Data Logging subroutine to capture data points every time you write to the data set. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_freeSamp.jpg" width="223" height="97"> <!--#end_picture2--> <!--#begin_text2--> This piece of code initializes the light sensor on port one, takes 10 data points on the Red Data Set, and then stops taking data points. It captures data every time you write to the data set. <!--#end_text2--> <!--#end_freesampling--> </td> </tr> <tr> <td width="47%"> <!--#begin_clockvalue--> <!--example=modifier_valueClock.vit=example--> <!--#begin_picture1--> <img src="images/clockvaluec.jpg" width="134" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the clock since 00:00 in minutes. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueClock.jpg" width="214" height="89"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the clock to 0 hours and 0 minutes and then waits 12 minutes. A sound is played and the value of the clock is displayed on the RCX. <!--#end_text2--> <!--#end_clockvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_firmwareversion--> <!--example=modifier_firmware.vit=example--> <!--#begin_picture1--> <img src="images/firmwareversionc.jpg" width="134" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this command when you want to see the value of the firmware in your RCX. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/valueoffirmware.jpg" width="275" height="94"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the firmware in your RCX and then displays it on your RCX screen. <!--#end_text2--> <!--#end_firmwareversion--> </td> </tr> <tr> <td width="47%"> <!--#begin_batteryvalue--> <!--example=modifier_battery.vit=example--> <!--#begin_picture1--> <img src="images/batteryvaluec.jpg" width="144" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this command when you want to use or monitor the battery value in your program. (Battery Power is represented as 1000 times the battery power so 7.654 = 7654). <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_battery.jpg" width="147" height="94"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the battery and then displays the value on the RCX. <!--#end_text2--> <!--#end_batteryvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_powerlevel1--> <!--example=modifier_port1.vit=example--> <!--#begin_picture1--> <img src="images/powerlevel1c.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a motor command to change the speed of the motor to 1. Speed 1 is the slowest, speed 5 is the fastest. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_port1.jpg" width="222" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor A forward at power level one until the touch sensor that is connected to Port one is pressed in. It then plays a sound and stops motor A. <!--#end_text2--> <!--#end_powerlevel1--> </td> </tr> <tr> <td width="47%"> <!--#begin_powerlevel2--> <!--example=modifier_port1.vit=example--> <!--#begin_picture1--> <img src="images/powerlevel2c.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a motor command to change the speed of the motor to 2. Speed 1 is the slowest, speed 5 is the fastest. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_port1.jpg" width="222" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor A forward at power level one until the touch sensor that is connected to Port one is pressed in. It then plays a sound and stops motor A. <!--#end_text2--> <!--#end_powerlevel2--> </td> </tr> <tr> <td width="47%"> <!--#begin_powerlevel3--> <!--example=rcxchangemotorspeed.vit=example--> <!--#begin_picture1--> <img src="images/powerlevel3c.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a motor command to change the speed of the motor to 3. Speed 1 is the slowest, speed 5 is the fastest. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/rcxchangemotorspeed.jpg" width="254" height="73"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs the motor on Port A for 1 second at the default power 5. It then changes the speed of the motor to a power level of 3, waits for 10 seconds, and then stops the motor. <!--#end_text2--> <!--#end_powerlevel3--> </td> </tr> <tr> <td width="47%"> <!--#begin_powerlevel4--> <!--example=motorcforward.vit=example--> <!--#begin_picture1--> <img src="images/powerlevel4c.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a motor command to change the speed of the motor to 4. Speed 1 is the slowest, speed 5 is the fastest. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/motorcforward.jpg" width="212" height="71"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor C forward at a power level of 4, waits for 6 seconds and the stops the motor. <!--#end_text2--> <!--#end_powerlevel4--> </td> </tr> <tr> <td width="47%"> <!--#begin_powerlevel5--> <!--example=motorcforward.vit=example--> <!--#begin_picture1--> <img src="images/powerlevel5c.jpg" width="149" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to a motor command to change the speed of the motor to 5. Speed 1 is the slowest, speed 5 is the fastest. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/motorcforward.jpg" width="212" height="71"> <!--#end_picture2--> <!--#begin_text2--> This piece of code runs motor C forward at a power level of 4, waits for 6 seconds and the stops the motor. <!--#end_text2--> <!--#end_powerlevel5--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofport1--> <!--example=modifier_valuePort1.vit=example--> <!--#begin_picture1--> <img src="images/valueofport1c.jpg" width="127" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of port 1. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valuePort1.jpg" width="194" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the light sensor on Port 1. It then plays a sound and displays the value of the red container on the RCX. <!--#end_text2--> <!--#end_valueofport1--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofport2--> <!--example=modifier_valuePort1.vit=example--> <!--#begin_picture1--> <img src="images/valueofport2c.jpg" width="127" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of port 2. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valuePort1.jpg" width="194" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the light sensor on Port 1. It then plays a sound and displays the value of the red container on the RCX. <!--#end_text2--> <!--#end_valueofport2--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofport3--> <!--example=modifier_valuePort1.vit=example--> <!--#begin_picture1--> <img src="images/valueofport3c.jpg" width="127" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of port 3. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valuePort1.jpg" width="194" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the light sensor on Port 1. It then plays a sound and displays the value of the red container on the RCX. <!--#end_text2--> <!--#end_valueofport3--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofredcontainer--> <!--example=containerTouchFillex.vit=example--> <!--#begin_picture1--> <img src="images/valueofredcontainerc.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the red container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerTouchFill.jpg" width="218" height="83"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Red Container with the value of the touch sensor. A sound is played and the value of the red container is shown on the RCX. If the value of the touch sensor was 1(meaning it was pressed in), the RCX would read 1. <!--#end_text2--> <!--#end_valueofredcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofbluecontainer--> <!--example=containerADDex.vit=example--> <!--#begin_picture1--> <img src="images/valueofbluecontainerc.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the blue container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerADDex.jpg" width="189" height="88"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Blue Container with a value of 1. It then ADDs 2 to the blue container. The value of the Blue Container would then be displayed on the RCX as 3. <!--#end_text2--> <!--#end_valueofbluecontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofyellowcontainer--> <!--example=containerLightFillex.vit=example--> <!--#begin_picture1--> <img src="images/valueofyellowcontainerc.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the yellow container. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerLightFill.jpg" width="220" height="81"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Yellow Container with the value of the light sensor. A sound is played and the value of the Yellow Container is shown on the RCX. If the value of the light sensor was 41, the RCX would read 41. <!--#end_text2--> <!--#end_valueofyellowcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_randomnumber--> <!--example=modifier_valueRandom.vit=example--> <!--#begin_picture1--> <img src="images/randomnumberc.jpg" width="265" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to generate a random number from 0-8. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueRandom.jpg" width="189" height="89"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will fill the Red Container with a random number from 0-8. The RCX will then play a sound and display the value of the red container on its screen. <!--#end_text2--> <!--#end_randomnumber--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofc-container--> <!--example=valueccontainerex.vit=example--> <!--#begin_picture1--> <img src="images/valueofc-containerc.jpg" width="260" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: The value in the container specified (Container #) is used to choose a container and the value in that container is passed out. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/valueofcconatinerex.jpg" width="343" height="119"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the blue container (also known as container #1) with the value 10 and fills the User 4 container with the value 1. It then displays the value of the container specified in User 4. User 4 contains the value 1 (which indicates the Blue container) and the Blue container contains the value 10 -- hence 10 is displayed for 4 seconds. Then the value of User 4 (which is 1) is displayed for 4 second s. <!--#end_text2--> <!--#end_valueofc-container--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofgenericcontainer--> <!--example=containerTempFFillex.vit=example--> <!--#begin_picture1--> <img src="images/valueofgenericcontainerc.jpg" width="260" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: This modifier represents the value of the generic container. You can have up to 21 containers. Zero (0) is red, 1 is yellow, 2 is blue, and 3-20 are user defined. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/containerTempFFill.jpg" width="220" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code fills the Generic Container with the value of the temperature sensor in Fahrenheit. A sound is played and the value of the Generic Container is shown on the RCX. If the value of the sensor was 75 deg, the RCX would read 75. <!--#end_text2--> <!--#end_valueofgenericcontainer--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofredtimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/valueofredtimerc.jpg" width="133" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the red timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for ten seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_valueofredtimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofbluetimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/valueofbluetimerc.jpg" width="133" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the blue timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for ten seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_valueofbluetimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofyellowtimer--> <!--example=modifier_RedTimer.vit=example--> <!--#begin_picture1--> <img src="images/valueofyellowtimerc.jpg" width="133" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the yellow timer. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_RedTimer.jpg" width="219" height="110"> <!--#end_picture2--> <!--#begin_text2--> This piece of code zeroes the Red Timer and then waits for ten seconds. The value of the Red Timer is put into the Red Container and then displayed on the RCX. <!--#end_text2--> <!--#end_valueofyellowtimer--> </td> </tr> <tr> <td width="47%"> <!--#begin_mailvalue--> <!--example=modifier_valueMail.vit=example--> <!--#begin_picture1--> <img src="images/mailvaluec.jpg" width="127" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the mail in the mailbox. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueMail.jpg" width="220" height="84"> <!--#end_picture2--> <!--#begin_text2--> This piece of code will fill the Red Container with the value of the mailbox. The RCX will then play a sound and display the value of the red container on its screen. <!--#end_text2--> <!--#end_mailvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxvalueofredlogger--> <!--example=modifier_valueRedDataSet.vit=example--> <!--#begin_picture1--> <img src="images/rcxvalueofredloggerc.jpg" width="154" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the red data set. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueRedDataSet.jpg" width="279" height="99"> <!--#end_picture2--> <!--#begin_text2--> This piece of code initializes the light sensor on Port 1, begins data logging in the Red Data Set for 10 points, and then fills the Blue Container with the last value taken in the Red Data Set. The value of the blue container is then displayed on the RCX. <!--#end_text2--> <!--#end_rcxvalueofredlogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxvalueofbluelogger--> <!--example=modifier_valueRedDataSet.vit=example--> <!--#begin_picture1--> <img src="images/rcxvalueofblueloggerc.jpg" width="154" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the blue data set. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueRedDataSet.jpg" width="279" height="99"> <!--#end_picture2--> <!--#begin_text2--> This piece of code initializes the light sensor on Port 1, begins data logging in the Red Data Set for 10 points, and then fills the Blue Container with the last value taken in the Red Data Set. The value of the blue container is then displayed on the RCX. <!--#end_text2--> <!--#end_rcxvalueofbluelogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_rcxvalueofyellowlogger--> <!--example=modifier_valueRedDataSet.vit=example--> <!--#begin_picture1--> <img src="images/rcxvalueofyellowloggerc.jpg" width="154" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to use the value of the yellow data set. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/modifier_valueRedDataSet.jpg" width="279" height="99"> <!--#end_picture2--> <!--#begin_text2--> This piece of code initializes the light sensor on Port 1, begins data logging in the Red Data Set for 10 points, and then fills the Blue Container with the last value taken in the Red Data Set. The value of the blue container is then displayed on the RCX. <!--#end_text2--> <!--#end_rcxvalueofyellowlogger--> </td> </tr> <tr> <td width="47%"> <!--#begin_redevent--> <!--example=blackjump.vit=example--> <!--#begin_picture1--> <img src="images/redeventc.jpg" width="107" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to an event definition or monitor command to select the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/blackjump.jpg" width="270" height="72"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a red event that is triggered when the touch sensor is pressed. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the touch sensor is pushed in. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_redevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_blueevent--> <!--example=eventBrighterexample.vit=example--> <!--#begin_picture1--> <img src="images/blueeventc.jpg" width="107" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to an event definition or monitor command to select the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventBrighterImage.jpg" width="327" height="80"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a blue event that is triggered when the light value goes above the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the light value goes above the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_blueevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_yellowevent--> <!--example=eventRotationDownexample.vit=example--> <!--#begin_picture1--> <img src="images/yelloweventc.jpg" width="107" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to an event definition or monitor command to select the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventRotationDownImage.jpg" width="327" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a yellow event that is triggered when the rotation value goes below the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the rotation value goes below the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_yellowevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_genericevent--> <!--example=eventContainerDropexample.vit=example--> <!--#begin_picture1--> <img src="images/genericeventc.jpg" width="188" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: String this modifier to an event definition or monitor command to select the Generic Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventContainerDropImage.jpg" width="326" height="95"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a generic event that is triggered when the red container value goes below the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the red container value goes below the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_genericevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofredevent--> <!--example=blackjump.vit=example--> <!--#begin_picture1--> <img src="images/valueofredeventc.jpg" width="237" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/blackjump.jpg" width="270" height="72"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a red event that is triggered when the touch sensor is pressed. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the touch sensor is pushed in. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_valueofredevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofblueevent--> <!--example=eventBrighterexample.vit=example--> <!--#begin_picture1--> <img src="images/valueofblueeventc.jpg" width="237" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventBrighterImage.jpg" width="327" height="80"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a blue event that is triggered when the light value goes above the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the light value goes above the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_valueofblueevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofyellowevent--> <!--example=eventRotationDownexample.vit=example--> <!--#begin_picture1--> <img src="images/valueofyelloweventc.jpg" width="237" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventRotationDownImage.jpg" width="327" height="87"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a yellow event that is triggered when the rotation value goes below the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the rotation value goes below the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_valueofyellowevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_valueofgenericevent--> <!--example=eventContainerDropexample.vit=example--> <!--#begin_picture1--> <img src="images/valueofgenericeventc.jpg" width="237" height="52"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Generic Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/eventContainerDropImage.jpg" width="326" height="95"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets up a generic event that is triggered when the red container value goes below the threshold. The Monitor Event icon begins monitoring for such an event to occur. A sound will be played over and over again until the red container value goes below the threshold. This will force the program out of the jump sequence and make it land where the Event Landing is located. <!--#end_text2--> <!--#end_valueofgenericevent--> </td> </tr> <tr> <td width="47%"> <!--#begin_redutvalue--> <!--example=redutvalueex.vit=example--> <!--#begin_picture1--> <img src="images/redutvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the upper threshold of the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redutvalueex.jpg"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red upper threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_redutvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_blueutvalue--> <!--example=redutvalueex.vit=example--> <!--#begin_picture1--> <img src="images/blueutvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the upper threshold of the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redutvalueex.jpg"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red upper threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_blueutvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_yellowutvalue--> <!--example=redutvalueex.vit=example--> <!--#begin_picture1--> <img src="images/yellowutvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the upper threshold of the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redutvalueex.jpg"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red upper threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_yellowutvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_genericutvalue--> <!--example=redutvalueex.vit=example--> <!--#begin_picture1--> <img src="images/genericutvaluec.jpg" width="239" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the upper threshold of the Generic Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redutvalueex.jpg"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red upper threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_genericutvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_redltvalue--> <!--example=redltvalueex.vit=example--> <!--#begin_picture1--> <img src="images/redltvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the lower threshold of the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redltvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red lower threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_redltvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_blueltvalue--> <!--example=redltvalueex.vit=example--> <!--#begin_picture1--> <img src="images/blueltvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the lower threshold of the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redltvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red lower threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_blueltvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_yellowltvalue--> <!--example=redltvalueex.vit=example--> <!--#begin_picture1--> <img src="images/yellowltvaluec.jpg" width="158" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the lower threshold of the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redltvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red lower threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_yellowltvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_genericltvalue--> <!--example=redltvalueex.vit=example--> <!--#begin_picture1--> <img src="images/genericltvaluec.jpg" width="239" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the lower threshold of the Generic Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redltvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red lower threshold on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_genericltvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_redhvalue--> <!--example=redhvalueex.vit=example--> <!--#begin_picture1--> <img src="images/redhvaluec.jpg" width="161" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Hysteresis of the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redhvalueex.jpg" width="269" height="120"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red hysteresis on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_redhvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_bluehvalue--> <!--example=redhvalueex.vit=example--> <!--#begin_picture1--> <img src="images/bluehvaluec.jpg" width="161" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Hysteresis of the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redhvalueex.jpg" width="269" height="120"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red hysteresis on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_bluehvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_yellowhvalue--> <!--example=redhvalueex.vit=example--> <!--#begin_picture1--> <img src="images/yellowhvaluec.jpg" width="161" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Hysteresis of the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redhvalueex.jpg" width="269" height="120"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red hysteresis on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_yellowhvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_generichvalue--> <!--example=redhvalueex.vit=example--> <!--#begin_picture1--> <img src="images/generichvaluec.jpg" width="242" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the Hysteresis of the Generic Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/redhvalueex.jpg" width="269" height="120"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red hysteresis on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_generichvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_reddurationvalue--> <!--example=reddurationvalueex.vit=example--> <!--#begin_picture1--> <img src="images/reddurationvaluec.jpg" width="152" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the duration of the Red Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/reddurationvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red duration on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_reddurationvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_bluedurationvalue--> <!--example=reddurationvalueex.vit=example--> <!--#begin_picture1--> <img src="images/bluedurationvaluec.jpg" width="152" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the duration of the Blue Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/reddurationvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red duration on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_bluedurationvalue--> </td> </tr> <tr> <td width="47%"> <!--#begin_yellowdurationvalue--> <!--example=reddurationvalueex.vit=example--> <!--#begin_picture1--> <img src="images/yellowdurationvaluec.jpg" width="152" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the duration of the Yellow Event. <!--#end_text1--> </td> <td width="53%"> <!--#begin_picture2--> <img src="images/reddurationvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red duration on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_yellowdurationvalue--> </td> </tr> <tr> <td> <!--#begin_genericdurationvalue--> <!--example=reddurationvalueex.vit=example--> <!--#begin_picture1--> <img src="images/genericdurationvaluec.jpg" width="233" height="32"> <!--#end_picture1--> <!--#begin_text1--> Hints: Use this modifier to represent the value of the duration of the Generic Event. <!--#end_text1--> </td> <td> <!--#begin_picture2--> <img src="images/reddurationvalueex.jpg" width="269" height="121"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets the red event to be a normal event with an upper threshold of 60, a lower threshold of 40, duration of 10 seconds, and hysteresis of 2. The program will beep repeatedly until the sensor on channel 1 fulfills the event requirements. It will then display the value of the red duration on the RCX LCD for 4 seconds. <!--#end_text2--> <!--#end_genericdurationvalue--> </td> </tr> <tr> <td> <!--#begin_rcxloopcounter--> <!--example=rcxloopcounterex.vit=example--> <!--#begin_picture1--> <img src="images/rcxloopcounterc.jpg" width="205" height="38"> <!--#end_picture1--> <!--#begin_text1--> Hints: The loop iteration is stored in a variable. Use this modifier, as you would use the Red Container, to set or manipulate the loop iteration value. <!--#end_text1--> </td> <td> <!--#begin_picture2--> <img src="images/rcxloopcounterex.jpg" width="267" height="124"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets a loop to run for 6 iterations. If the touch sensor is pressed the loop iteration is set to zero and therefore the loops stops running. <!--#end_text2--> <!--#end_rcxloopcounter--> </td> </tr> <tr> <td> <!--#begin_valueofloopcounter--> <!--example=valueofloopcounterex.vit=example--> <!--#begin_picture1--> <img src="images/valueofloopcounterc.jpg" width="232" height="38"> <!--#end_picture1--> <!--#begin_text1--> Hints: The loop iteration is stored in a variable . Use this modifier, as you would use the Red Container Value, to view the loop iteration value. <!--#end_text1--> </td> <td> <!--#begin_picture2--> <img src="images/valueofloopcounterex.jpg" width="309" height="76"> <!--#end_picture2--> <!--#begin_text2--> This piece of code sets a loop to iterate 4 times. The value of the loop iteration is wired into the Play Sound icon (which plays different sounds depending which number is wired into it). As the loop iteration changes different sounds are played (Play Sound does not have a sound for the 0 state so the sound for the 1 state is played twice). <!--#end_text2--> <!--#end_valueofloopcounter--> </td> </tr> </table> <p>&nbsp; </p> </body> </html>